{"version":3,"sources":["Header.js","firebase.js","IndividualItem.js","GroceryList.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","IndividualItem","crossOffItem","crossy","state","listClass","setState","removeItem","event","database","ref","child","target","id","remove","key","this","props","itemIdProp","onClick","className","itemNameProp","GroceryList","meatArray","newItemsArrayProp","filter","item","i","groceryItem","category","fruitVegArray","dairyArray","dryGoodsArray","freezerItemsArray","miscArray","map","itemName","type","clearList","Footer","App","handleFormSubmit","preventDefault","dbRef","push","Swal","fire","handleChangeRadio","value","handleChangeText","newItemsArray","on","snapshot","groceryItems","val","newItems","individualGroceryItem","name","autoComplete","onChange","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17db4ab9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Grocery List App</h1>\n        <p>\n          Enter your grocery item below and select which category it fits into\n          and the App will populate an organized grocery list for you!\n        </p>\n      </header>\n    );\n  }\n}\nexport default Header;\n","import firebase from 'firebase'; \nimport 'firebase/database'\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA1vbgujCHtmUOKXamUVfl9eh5M0Nb1S_o\",\n    authDomain: \"grocery-list-73906.firebaseapp.com\",\n    databaseURL: \"https://grocery-list-73906.firebaseio.com\",\n    projectId: \"grocery-list-73906\",\n    storageBucket: \"grocery-list-73906.appspot.com\",\n    messagingSenderId: \"431558922197\",\n    appId: \"1:431558922197:web:818a1b8c12597f3040775c\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nclass IndividualItem extends Component {\n  constructor() {\n    super();\n    this.state = {\n      listClass: \"null\"\n    };\n  }\n  crossOffItem = () => {\n    const crossy = this.state.listClass;\n    this.setState({\n      listClass: !crossy\n    });\n  };\n  removeItem = event => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(event.target.id).remove();\n  };\n\n  render() {\n    return (\n      <li\n        key={this.props.itemIdProp}\n        onClick={this.crossOffItem}\n        className={this.state.listClass ? \"null\" : \"crossedOut\"}\n      >\n        {this.props.itemNameProp}\n        <span\n          id={this.props.itemIdProp}\n          className=\"removeSpan\"\n          onClick={this.removeItem}\n        >\n          ðŸ—‘\n        </span>{\" \"}\n      </li>\n    );\n  }\n}\nexport default IndividualItem;\n","import React, { Component } from \"react\";\nimport IndividualItem from \"./IndividualItem\";\n\nclass GroceryList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      listClass: \"null\"\n    };\n  }\n\n  render() {\n    // filtering array by category to properly display, filter then map over the array below\n    const meatArray = this.props.newItemsArrayProp.filter((item, i) => {\n      return item.groceryItem.category === \"meat\";\n    });\n    const fruitVegArray = this.props.newItemsArrayProp.filter((item, i) => {\n      return item.groceryItem.category === \"fruitVeg\";\n    });\n    const dairyArray = this.props.newItemsArrayProp.filter((item, i) => {\n      return item.groceryItem.category === \"dairy\";\n    });\n    const dryGoodsArray = this.props.newItemsArrayProp.filter((item, i) => {\n      return item.groceryItem.category === \"dryGoods\";\n    });\n    const freezerItemsArray = this.props.newItemsArrayProp.filter((item, i) => {\n      return item.groceryItem.category === \"freezerItems\";\n    });\n    const miscArray = this.props.newItemsArrayProp.filter((item, i) => {\n      return item.groceryItem.category === \"misc\";\n    });\n\n    return (\n      // printing the arays from database in categories\n\n      <div className=\"groceryList\">\n        <div className=\"groceryBox\">\n          <h2>Your List</h2>\n          <h3>Meats:</h3>\n          <ul>\n            {meatArray.map(item => {\n              return (\n                <IndividualItem\n                  itemNameProp={item.groceryItem.itemName}\n                  itemIdProp={item.id}\n                />\n              );\n            })}\n          </ul>\n\n          <h3>Produce:</h3>\n          <ul>\n            {fruitVegArray.map(item => {\n              return (\n                <IndividualItem\n                  itemNameProp={item.groceryItem.itemName}\n                  itemIdProp={item.id}\n                />\n              );\n            })}\n          </ul>\n\n          <h3>Dairy:</h3>\n          <ul>\n            {dairyArray.map(item => {\n              return (\n                <IndividualItem\n                  itemNameProp={item.groceryItem.itemName}\n                  itemIdProp={item.id}\n                />\n              );\n            })}\n          </ul>\n\n          <h3>Pantry Items:</h3>\n          <ul>\n            {dryGoodsArray.map(item => {\n              return (\n                <IndividualItem\n                  itemNameProp={item.groceryItem.itemName}\n                  itemIdProp={item.id}\n                />\n              );\n            })}\n          </ul>\n\n          <h3>Freezer Items:</h3>\n          <ul>\n            {freezerItemsArray.map(item => {\n              return (\n                <IndividualItem\n                  itemNameProp={item.groceryItem.itemName}\n                  itemIdProp={item.id}\n                />\n              );\n            })}\n          </ul>\n\n          <h3>Miscellaneous:</h3>\n          <ul>\n            {miscArray.map(item => {\n              return (\n                <IndividualItem\n                  itemNameProp={item.groceryItem.itemName}\n                  itemIdProp={item.id}\n                />\n              );\n            })}\n          </ul>\n        </div>\n        {/* clear list button still need to be functional */}\n        <button type=\"submit\" className=\"clearList\" onClick={this.clearList}>\n          Clear List\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default GroceryList;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <p> Grocery List GeneratorÂ© Bethan Davies </p>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport GroceryList from \"./GroceryList\";\nimport Footer from \"./Footer\";\nimport firebase from \"./firebase\";\nimport Swal from \"sweetalert2\";\nimport \"./App.css\";\n\n// things to add :)\n\n// NEEDED (finish by saturday): error handling, styling (ensure list is not off page when a lot of items), delete item on click of span, cross off item on click\n// NICE TO HAVE(finish on sunday fishbowl): Option to print list and send list to email, final styling, quantities, STRETCH GOAL have user be able to login\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      itemName: \"\",\n      category: \"\",\n      newItemsArray: []\n    };\n  }\n  // basic functionality of form below, establishing state and updating it as needed\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on(\"value\", snapshot => {\n      const groceryItems = snapshot.val();\n      const newItems = [];\n      for (let key in groceryItems) {\n        const individualGroceryItem = {\n          id: key,\n          groceryItem: groceryItems[key]\n        };\n        newItems.push(individualGroceryItem);\n      }\n      this.setState({\n        newItemsArray: newItems\n      });\n    });\n  }\n  // handles the form once information is gathered, pushes to the database once the name and category is grabbed from user input\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    if (this.state.itemName !== \"\" && this.state.category !== \"\")\n      dbRef.push({\n        itemName: this.state.itemName,\n        category: this.state.category\n      });\n    // error handling for user not inputting text or category\n    else\n      Swal.fire(\n        \"You forgot to enter an item or category!\",\n        \"Please enter an item and select a category in the box above\",\n        \"question\"\n      );\n  };\n\n  // ASSESSES which radio button is clicked and links it to that category that the user has selected, updates state\n  handleChangeRadio = event => {\n    this.setState({\n      category: event.target.value\n    });\n  };\n  // ASSESSES what was inputted in text by the user and sets it to state\n  handleChangeText = event => {\n    this.setState({\n      itemName: event.target.value\n    });\n  };\n\n  render() {\n    return (\n      // on change/on click handles and returning of other components\n\n      <div className=\"mainReturnDiv\">\n        <div className=\"wrapper\">\n          <Header />\n          <form className=\"inputForm\">\n            <label className=\"sr-only\">\n              Enter individual grocery item here\n            </label>\n            <input\n              type=\"text\"\n              name=\"userInput\"\n              autoComplete=\"off\"\n              onChange={this.handleChangeText}\n            />\n            <fieldset className=\"radioButtons\">\n              <legend>Select a category below</legend>\n              <div className=\"flexcolumn\">\n                <label>Meat</label>\n                <input\n                  type=\"radio\"\n                  name=\"categoryInput\"\n                  value=\"meat\"\n                  checked={this.state.category === \"meat\"}\n                  onChange={this.handleChangeRadio}\n                />\n              </div>\n              <div className=\"flexcolumn\">\n                <label>Produce</label>\n                <input\n                  type=\"radio\"\n                  name=\"categoryInput\"\n                  value=\"fruitVeg\"\n                  checked={this.state.category === \"fruitVeg\"}\n                  onChange={this.handleChangeRadio}\n                />\n              </div>\n              <div className=\"flexcolumn\">\n                <label>Dairy Products</label>\n                <input\n                  type=\"radio\"\n                  name=\"categoryInput\"\n                  value=\"dairy\"\n                  checked={this.state.category === \"dairy\"}\n                  onChange={this.handleChangeRadio}\n                />\n              </div>\n              <div className=\"flexcolumn\">\n                <label>Pantry Items</label>\n                <input\n                  type=\"radio\"\n                  name=\"categoryInput\"\n                  value=\"dryGoods\"\n                  checked={this.state.category === \"dryGoods\"}\n                  onChange={this.handleChangeRadio}\n                />\n              </div>\n              <div className=\"flexcolumn\">\n                <label>Freezer Items</label>\n                <input\n                  type=\"radio\"\n                  name=\"categoryInput\"\n                  value=\"freezerItems\"\n                  checked={this.state.category === \"freezerItems\"}\n                  onChange={this.handleChangeRadio}\n                />\n              </div>\n              <div className=\"flexcolumn\">\n                <label>Miscellaneous</label>\n                <input\n                  type=\"radio\"\n                  name=\"categoryInput\"\n                  value=\"misc\"\n                  checked={this.state.category === \"misc\"}\n                  onChange={this.handleChangeRadio}\n                />\n              </div>\n            </fieldset>\n            <button type=\"submit\" onClick={this.handleFormSubmit}>\n              Submit Item\n            </button>\n          </form>\n\n          {/* passing the newItemsArray as a prop to component GroceryList.js */}\n\n          <GroceryList newItemsArrayProp={this.state.newItemsArray} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}